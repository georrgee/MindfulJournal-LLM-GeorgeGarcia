import { composeRefs } from "@tamagui/compose-refs";
import { isWeb } from "@tamagui/core";
import { ScrollView } from "@tamagui/scroll-view";
import { useControllableState } from "@tamagui/use-controllable-state";
import React, { useEffect } from "react";
import { useSheetContext } from "./SheetContext.mjs";
import { jsx } from "react/jsx-runtime";
const SHEET_SCROLL_VIEW_NAME = "SheetScrollView",
  SheetScrollView = React.forwardRef(({
    __scopeSheet,
    children,
    onScroll,
    scrollEnabled: scrollEnabledProp,
    ...props
  }, ref) => {
    const context = useSheetContext(SHEET_SCROLL_VIEW_NAME, __scopeSheet),
      {
        scrollBridge,
        scrollEnabled: scrollEnabled_,
        setHasScrollView
      } = context,
      [scrollEnabled, setScrollEnabled_] = useControllableState({
        prop: scrollEnabledProp,
        defaultProp: !0
      }),
      scrollRef = React.useRef(null),
      setScrollEnabled = next => {
        scrollRef.current?.setNativeProps?.({
          scrollEnabled: next
        }), setScrollEnabled_(next);
      },
      state = React.useRef({
        lastPageY: 0,
        dragAt: 0,
        dys: [],
        // store a few recent dys to get velocity on release
        isScrolling: !1,
        isDragging: !1
      });
    useEffect(() => (setHasScrollView(!0), () => {
      setHasScrollView(!1);
    }), []);
    const release = () => {
        if (!state.current.isDragging) return;
        state.current.isDragging = !1, scrollBridge.scrollStartY = -1, state.current.isScrolling = !1, setScrollEnabled(!0);
        let vy = 0;
        if (state.current.dys.length) {
          const recentDys = state.current.dys.slice(-10);
          vy = (recentDys.length ? recentDys.reduce((a, b) => a + b, 0) : 0) / recentDys.length * 0.04;
        }
        state.current.dys = [], scrollBridge.release({
          dragAt: state.current.dragAt,
          vy
        });
      },
      scrollable = scrollEnabled ?? scrollEnabled_;
    return /* @__PURE__ */jsx(ScrollView, {
      ref: composeRefs(scrollRef, ref),
      flex: 1,
      scrollEventThrottle: 8,
      onResponderRelease: release,
      className: "_ovs-contain",
      scrollEnabled: scrollable,
      onScroll: e => {
        const {
          y
        } = e.nativeEvent.contentOffset;
        scrollBridge.y = y, isWeb && (scrollBridge.scrollLock = y > 0), y > 0 && (scrollBridge.scrollStartY = -1), onScroll?.(e);
      },
      onStartShouldSetResponder: () => (scrollBridge.scrollStartY = -1, state.current.isDragging = !0, scrollable),
      onMoveShouldSetResponder: e => scrollable,
      contentContainerStyle: {
        minHeight: "100%"
      },
      onResponderMove: e => {
        if (isWeb) {
          const {
            pageY
          } = e.nativeEvent;
          if (state.current.isScrolling) {
            e.stopPropagation();
            return;
          }
          scrollBridge.scrollStartY === -1 && (scrollBridge.scrollStartY = pageY, state.current.lastPageY = pageY);
          const dragAt = pageY - scrollBridge.scrollStartY,
            dy = pageY - state.current.lastPageY;
          state.current.lastPageY = pageY;
          const isDraggingUp = dy < 0,
            isPaneAtTop = scrollBridge.paneY <= scrollBridge.paneMinY;
          if ((dy === 0 || isDraggingUp) && isPaneAtTop) {
            state.current.isScrolling = !0, scrollBridge.scrollLock = !0, setScrollEnabled(!0);
            return;
          }
          setScrollEnabled(!1), scrollBridge.drag(dragAt), state.current.dragAt = dragAt, state.current.dys.push(dy), state.current.dys.length > 100 && (state.current.dys = state.current.dys.slice(-10));
        }
      },
      ...props,
      children
    });
  });
export { SheetScrollView };
//# sourceMappingURL=SheetScrollView.mjs.map
